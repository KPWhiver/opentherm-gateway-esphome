esphome:
  name: opentherm_gateway
  platform: ESP8266
  board: nodemcuv2
  includes:
  - opentherm_gateway.h
  - opentherm_gateway_thermostat.h

wifi:
  reboot_timeout: 60min
  ssid: "*25*"
  password: !secret wifipass

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Opentherm Fallback Hotspot"
    password: !secret fallbackwifipass

captive_portal:

# Enable logging
logger:
  baud_rate: 0
  level: DEBUG
  esp8266_store_log_strings_in_flash: False

# Enable Home Assistant API
api:
  reboot_timeout: 60min

ota:

uart:
  id: uart_bus
  tx_pin: GPIO1
  rx_pin: GPIO3
  baud_rate: 9600
  data_bits: 8
  stop_bits: 1
  parity: NONE

custom_component:
- lambda: |-
    auto opentherm_gateway = new OpenthermGateway(id(uart_bus));
    return {opentherm_gateway};
  id: opentherm_gateway_uart

climate:
- platform: custom
  lambda: |-
    auto component_constructor = const_cast<custom_component::CustomComponentConstructor*>(&id(opentherm_gateway_uart));
    auto opentherm_gateway = reinterpret_cast<OpenthermGateway*>(component_constructor->get_component(0));
    auto opentherm_gateway_thermostat = new OpenthermGatewayThermostat(opentherm_gateway);
    return {opentherm_gateway_thermostat};
  id: opentherm_gateway_thermostat
  climates:
  - name: "Thermostat"

text_sensor:
- platform: custom
  lambda: |-
    auto component_constructor = const_cast<custom_component::CustomComponentConstructor*>(&id(opentherm_gateway_uart));
    auto opentherm_gateway = reinterpret_cast<OpenthermGateway*>(component_constructor->get_component(0));
    return {
      opentherm_gateway->s_heater_state,
      opentherm_gateway->s_last_command
    };
  text_sensors:
  - name: "Heater state"
  - name: "Last command"

binary_sensor:
- platform: custom
  lambda: |-
    auto component_constructor = const_cast<custom_component::CustomComponentConstructor*>(&id(opentherm_gateway_uart));
    auto opentherm_gateway = reinterpret_cast<OpenthermGateway*>(component_constructor->get_component(0));
    return {
      // Master state
      opentherm_gateway->s_master_central_heating_1,
      opentherm_gateway->s_master_water_heating,
      opentherm_gateway->s_master_cooling,
      opentherm_gateway->s_master_outside_temperature_compensation,
      opentherm_gateway->s_master_central_heating_2,

      // Slave state
      opentherm_gateway->s_slave_fault,
      opentherm_gateway->s_slave_central_heating_1,
      opentherm_gateway->s_slave_water_heating,
      opentherm_gateway->s_slave_flame,
      opentherm_gateway->s_slave_cooling,
      opentherm_gateway->s_slave_central_heating_2,
      opentherm_gateway->s_slave_diagnostic_event,

      // Faults
      opentherm_gateway->s_service_required,
      opentherm_gateway->s_lockout_reset,
      opentherm_gateway->s_low_water_pressure,
      opentherm_gateway->s_gas_flame_fault,
      opentherm_gateway->s_air_pressure_fault,
      opentherm_gateway->s_water_overtemperature
    };
  binary_sensors:
  # Master state
  - name: "Master Central Heating 1"
  - name: "Master Water Heating"
  - name: "Master Cooling"
  - name: "Master Outside Temperature Compensation"
  - name: "Master Central Heating 2"

  # Slave state
  - name: "Slave Fault"
  - name: "Slave Central Heating 1"
  - name: "Slave Water Heating"
  - name: "Slave Flame"
  - name: "Slave Cooling"
  - name: "Slave Central Heating 2"
  - name: "Slave Diagnostic Event"

  # Faults
  - name: "Service Required"
  - name: "Lockout Reset"
  - name: "Low water Pressure"
  - name: "Gas Flame Fault"
  - name: "Air Pressure Fault"
  - name: "Water Overtemperature"

sensor:
- platform: wifi_signal
  name: "WiFi signal"
  update_interval: 60s
  entity_category: diagnostic
- platform: custom
  lambda: |-
    auto component_constructor = const_cast<custom_component::CustomComponentConstructor*>(&id(opentherm_gateway_uart));
    auto opentherm_gateway = reinterpret_cast<OpenthermGateway*>(component_constructor->get_component(0));
    return {
      // Setpoints
      opentherm_gateway->s_max_central_heating_setpoint,
      opentherm_gateway->s_central_heating_setpoint_1,
      opentherm_gateway->s_central_heating_setpoint_2,
      opentherm_gateway->s_hot_water_setpoint,
      opentherm_gateway->s_remote_override_room_setpoint,
      opentherm_gateway->s_room_setpoint_1,
      opentherm_gateway->s_room_setpoint_2,

      // Temperatures
      opentherm_gateway->s_central_heating_temperature,
      opentherm_gateway->s_hot_water_1_temperature,
      opentherm_gateway->s_hot_water_2_temperature,
      opentherm_gateway->s_room_temperature,
      opentherm_gateway->s_outside_temperature,
      opentherm_gateway->s_return_water_temperature,
      opentherm_gateway->s_solar_storage_temperature,
      opentherm_gateway->s_solar_collector_temperature,
      opentherm_gateway->s_central_heating_2_flow_water_temperature,
      opentherm_gateway->s_exhaust_temperature,

      // Modulation
      opentherm_gateway->s_max_relative_modulation_level,
      opentherm_gateway->s_max_boiler_capacity,
      opentherm_gateway->s_min_modulation_level,
      opentherm_gateway->s_relative_modulation_level,

      // Water
      opentherm_gateway->s_central_heating_water_pressure,
      opentherm_gateway->s_hot_water_flow_rate,

      // Starts
      opentherm_gateway->s_central_heating_burner_starts,
      opentherm_gateway->s_central_heating_pump_starts,
      opentherm_gateway->s_hot_water_pump_starts,
      opentherm_gateway->s_hot_water_burner_starts,

      // Operation hours
      opentherm_gateway->s_central_heating_burner_operation_hours,
      opentherm_gateway->s_central_heating_pump_operation_hours,
      opentherm_gateway->s_hot_water_pump_operation_hours,
      opentherm_gateway->s_hot_Water_burner_operation_hours,

      // Thermostat
      opentherm_gateway->s_average_temperature,
      opentherm_gateway->s_average_temperature_change,
      opentherm_gateway->s_predicted_temperature
    };
  sensors:
  # Setpoints
  - name: "Max Central Heating Setpoint"
    unit_of_measurement: "°C"
    accuracy_decimals: 2
  - name: "Central Heating Setpoint 1"
    unit_of_measurement: "°C"
    accuracy_decimals: 2
  - name: "Central Heating Setpoint 2"
    unit_of_measurement: "°C"
    accuracy_decimals: 2
  - name: "Hot Water Setpoint"
    unit_of_measurement: "°C"
    accuracy_decimals: 2
  - name: "Remote Override Room Setpoint"
    unit_of_measurement: "°C"
    accuracy_decimals: 2
  - name: "Room Setpoint 1"
    unit_of_measurement: "°C"
    accuracy_decimals: 2
  - name: "Room Setpoint 2"
    unit_of_measurement: "°C"
    accuracy_decimals: 2

  # Temperatures
  - name: "Central Heating Temperature"
    unit_of_measurement: "°C"
    accuracy_decimals: 2
  - name: "Hot Water 1 Temperature"
    unit_of_measurement: "°C"
    accuracy_decimals: 2
  - name: "Hot Water 2 Temperature"
    unit_of_measurement: "°C"
    accuracy_decimals: 2
  - name: "Room Temperature"
    unit_of_measurement: "°C"
    accuracy_decimals: 2
  - name: "Outside Temperature"
    unit_of_measurement: "°C"
    accuracy_decimals: 2
  - name: "Return Water Temperature"
    unit_of_measurement: "°C"
    accuracy_decimals: 2
  - name: "Solar Storage Temperature"
    unit_of_measurement: "°C"
    accuracy_decimals: 2
  - name: "Solar Collector Temperature"
    unit_of_measurement: "°C"
  - name: "Central Heating 2 Flow Water Temperature"
    unit_of_measurement: "°C"
    accuracy_decimals: 2
  - name: "Exhaust Temperature"
    unit_of_measurement: "°C"

  # Modulation
  - name: "Max Relative Modulation Level"
    unit_of_measurement: "%"
    accuracy_decimals: 2
  - name: "Max Boiler Capacity"
    unit_of_measurement: "kWh"
  - name: "Min Modulation Level"
    unit_of_measurement: "%"
  - name: "Relative Modulation Level"
    unit_of_measurement: "%"
    accuracy_decimals: 2

  # Water
  - name: "Central Heating Water Pressure"
    unit_of_measurement: "bar"
    accuracy_decimals: 2
  - name: "Hot Water Flow Rate"
    unit_of_measurement: "litres/minute"
    accuracy_decimals: 2

  # Starts
  - name: "Central Heating Burner Starts"
  - name: "Central Heating Pump Starts"
  - name: "Hot Water Pump Starts"
  - name: "Hot Water Burner Starts"

  # Operation hours
  - name: "Central Heating Burner Operation Time"
    unit_of_measurement: "h"
  - name: "Central Heating Pump Operation Time"
    unit_of_measurement: "h"
  - name: "Hot Water Pump Operation Time"
    unit_of_measurement: "h"
  - name: "Hot Water Burner Operation Time"
    unit_of_measurement: "h"

  # Thermostat
  - name: "Average room temperature"
    unit_of_measurement: "°C"
    accuracy_decimals: 2
  - name: "Average room temperature change"
    unit_of_measurement: "°C"
    accuracy_decimals: 2
  - name: "Predicted room temperature"
    unit_of_measurement: "°C"
    accuracy_decimals: 2


number:
- platform: template
  name: Outside temperature
  icon: "mdi:thermometer"
  entity_category: config
  unit_of_measurement: "°C"
  optimistic: true
  min_value: -100.0
  max_value: 100.0
  step: 0.1
  initial_value: 0.0
  set_action:
  - lambda: |-
      auto component_constructor = const_cast<custom_component::CustomComponentConstructor*>(&id(opentherm_gateway_uart));
      auto opentherm_gateway = reinterpret_cast<OpenthermGateway*>(component_constructor->get_component(0));
      opentherm_gateway->set_outside_temperature(x);


switch:
- platform: template
  name: Heating
  optimistic: true
  turn_on_action:
  - lambda: |-
      auto component_constructor = const_cast<custom_component::CustomComponentConstructor*>(&id(opentherm_gateway_uart));
      auto opentherm_gateway = reinterpret_cast<OpenthermGateway*>(component_constructor->get_component(0));
      opentherm_gateway->set_secondary_heating(true);
  turn_off_action:
  - lambda: |-
      auto component_constructor = const_cast<custom_component::CustomComponentConstructor*>(&id(opentherm_gateway_uart));
      auto opentherm_gateway = reinterpret_cast<OpenthermGateway*>(component_constructor->get_component(0));
      opentherm_gateway->set_secondary_heating(false);
