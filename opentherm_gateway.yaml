esphome:
  name: opentherm-gateway
  platform: ESP8266
  board: d1_mini

wifi:
  reboot_timeout: 60min
  ssid: "*IOT*"
  password: !secret wifipass

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Opentherm Fallback Hotspot"
    password: !secret fallbackwifipass

captive_portal:

# Enable logging
logger:
  baud_rate: 0
  level: DEBUG
  esp8266_store_log_strings_in_flash: False

# Enable Home Assistant API
api:
  reboot_timeout: 60min

ota:

external_components:
  - source:
      type: local
      path: components

otgw:
  override_thermostat: true

#i2c:
#  id: i2c_bus
#  sda: GPIO4 #D2
#  scl: GPIO5 #D1
#  scan: true

dallas:
- pin: D0

uart:
  id: uart_bus
  tx_pin: GPIO1
  rx_pin: GPIO3
  baud_rate: 9600
  data_bits: 8
  stop_bits: 1
  parity: NONE

text_sensor:
- platform: otgw
  heater_state:
    name: "Heater state"
  last_command:
    name: "Last command"

binary_sensor:
- platform: otgw

  # Master state
  master_central_heating_1:
    name: "Master Central Heating"
  master_water_heating:
    name: "Master Water Heating"
  master_outside_temperature_compensation:
    name: "Master Outside Temperature Compensation"

  # Slave state
  slave_fault:
    name: "Slave Fault"
  slave_central_heating_1:
    name: "Slave Central Heating"
  slave_water_heating:
    name: "Slave Water Heating"
  slave_flame:
    name: "Slave Flame"
    id: flame
  slave_diagnostic_event:
    name: "Slave Diagnostic Event"

  # Faults
  service_required:
    name: "Service Required"
  lockout_reset:
    name: "Lockout Reset"
  low_water_pressure:
    name: "Low water Pressure"
  gas_flame_fault:
    name: "Gas Flame Fault"
  air_pressure_fault:
    name: "Air Pressure Fault"
  water_overtemperature:
    name: "Water Overtemperature"

sensor:
- platform: homeassistant
  name: "Office temperature"
  entity_id: climate.office_radiator
  attribute: local_temperature
  id: office_temperature
- platform: dallas
  address: 0xc8012037360a1d28
  name: "External return water temperature"
  id: external_return_temperature
- platform: wifi_signal
  name: "WiFi signal"
  update_interval: 60s
  entity_category: diagnostic
- platform: otgw

  # Setpoints
  max_central_heating_setpoint:
    name: "Max Central Heating Setpoint"
  central_heating_setpoint_1:
    name: "Central Heating Setpoint"
  room_setpoint_1:
    name: "Room Setpoint"
    on_value:
      then:
        - lambda: |-
            auto call = id(floor_heating_id).make_call();
            call.set_target_temperature(x);
            call.perform();

  # Temperatures
  central_heating_temperature_1:
    name: "Central Heating Temperature"
    id: central_heating_temperature
  hot_water_temperature_1:
    name: "Hot Water Temperature"
  room_temperature:
    name: "Room Temperature"
    id: room_temperature
  outside_temperature:
    name: "Outside Temperature"
  return_water_temperature:
    name: "Return Water Temperature"

  # Modulation
  relative_modulation_level:
    name: "Relative Modulation Level"

  # Water
  central_heating_water_pressure:
    name: "Central Heating Water Pressure"
  hot_water_flow_rate:
    name: "Hot Water Flow Rate"

  # Starts
  central_heating_burner_starts:
    name: "Central Heating Burner Starts"
  central_heating_pump_starts:
    name: "Central Heating Pump Starts"
  hot_water_burner_starts:
    name: "Hot Water Pump Starts"
  hot_water_pump_starts:
    name: "Hot Water Burner Starts"

  # Operation hours
  central_heating_burner_operation_time:
    name: "Central Heating Burner Operation Time"
  central_heating_pump_operation_time:
    name: "Central Heating Pump Operation Time"
  hot_water_pump_operation_time:
    name: "Hot Water Pump Operation Time"
  hot_water_burner_operation_time:
    name: "Hot Water Burner Operation Time"

climate:
  - platform: otgw
    room_thermostat:
      internal: true
      id: room_thermostat
      name: "Livingroom"
    heating_circuit_1:
      internal: true
      id: heater_circuit
      name: "Heating circuit"
  - platform: thermostat
    name: "Office"
    id: office_thermostat
    sensor: office_temperature
    min_heating_off_time: 300s
    min_heating_run_time: 300s
    min_idle_time: 300s
    heat_action:
      - lambda: |-
          if (id(floor_heating_id).action != climate::CLIMATE_ACTION_HEATING) {
            auto call = id(heater_circuit).make_call();
            call.set_target_temperature(55);
            call.set_mode(climate::CLIMATE_MODE_HEAT);
            call.perform();
          }
    idle_action:
      - lambda: |-
          if (id(floor_heating_id).action != climate::CLIMATE_ACTION_HEATING) {
            auto call = id(heater_circuit).make_call();
            call.set_target_temperature(0);
            call.set_mode(climate::CLIMATE_MODE_OFF);
            call.perform();
          }
    default_preset: Home
    preset:
      - name: Home
        default_target_temperature_low: 20 Â°C
  - platform: floor_heating
    name: "Livingroom"
    id: floor_heating_id
    temperature: room_temperature
    heater_temperature: central_heating_temperature
    heater_active: flame
    default_target_temperature: 18
    max_heater_temperature_setpoint: 55
    min_heater_temperature_setpoint: 25
    heater_return_temperature: external_return_temperature
    heat_action:
      - lambda: |-
          auto call = id(heater_circuit).make_call();
          call.set_target_temperature(id(floor_heating_id).heater_temperature_setpoint());
          call.set_mode(climate::CLIMATE_MODE_HEAT);
          call.perform();
    idle_action:
      - lambda: |-
          auto call = id(heater_circuit).make_call();
          if (id(office_thermostat).action != climate::CLIMATE_ACTION_HEATING) {
            call.set_target_temperature(0);
            call.set_mode(climate::CLIMATE_MODE_OFF);
          } else {
            call.set_target_temperature(55);
          }
          call.perform();
    on_control:
      - lambda: |-
          if (x.get_target_temperature().has_value()) {
            auto call = id(room_thermostat).make_call();
            call.set_target_temperature(x.get_target_temperature());
            call.perform();
          }
